"""___package_name___ root Conan file"""

from importlib import import_module
import os
from typing import List, Dict

from conan import ConanFile
from conan.errors import ConanException
from conan.tools.files import copy as copy_file
from conan.tools.gnu import PkgConfigDeps
from conan.tools.meson import Meson, MesonToolchain
from conan.tools.scm import Git


this_dir: str = os.path.dirname(__file__)

required_conan_version = ">=2.0.0"


class ___package_name___(ConanFile):
    """___package_name___"""

    # Required
    name = "___package_name___"

    # Metadata
    license = "___license___"
    author = "___author___ (___email___)"
    url = "___url___"
    description = "___description___"
    topics = ["<< topics >>"]

    # Configuration
    package_type = "___package_type___"
    settings = "os", "compiler", "build_type", "arch"
    options = {
        "shared": [True, False],
        "fPIC": [True, False],
        "quit_after_generate": [True, False],
    }
    default_options = {
        "shared": False,
        "fPIC": True,
        "quit_after_generate": False,
    }
    build_policy = "missing"

    # Files needed by Conan to resolve version and dependencies
    exports = (
        os.path.join(".git", "*"),
        "update_deps.py",
        "dependencies.ini",
    )

    # Files needed by Conan to build from source
    exports_sources = (
        os.path.join(name, "*"),
        os.path.join("src", "*"),
        "meson.build",
    )

    # External includes
    _dep_module = import_module("update_deps")

    def set_version(self):
        """Get project version from Git"""
        git = Git(self, folder=self.recipe_folder)
        try:
            self.version = git.run("describe --tags").partition("-")[0]
        except ConanException:
            self.version = "0.0.0"

    def config_options(self):
        """Change available options"""
        if self.settings.os == "Windows":
            del self.options.fPIC

    def configure(self):
        """Change behavior based on set options"""
        if self.options.shared:
            self.options.rm_safe("fPIC")

    def build_requirements(self):
        """Declare dependencies of the build system"""
        self.tool_requires("meson/1.2.1")
        self.tool_requires("pkgconf/2.0.3")

    def requirements(self):
        """Resolve and declare dependencies"""
        dependency_file = os.path.join(self.recipe_folder, "dependencies.ini")

        self._declared_deps = self._dep_module.Dependencies(dependency_file)
        self._declared_deps.read()

        for dep in self._declared_deps.explicit:
            if dep.status:
                self.requires(dep.name + "/" + dep.version)

    def layout(self):
        """Set the layout of the build files"""
        self.folders.build = os.path.join(self.recipe_folder, "build")
        self.folders.generators = os.path.join(self.folders.build, "generators")

    def generate(self):
        """Generate the build system"""
        deps = PkgConfigDeps(self)
        deps.generate()

        meson_dep_dict = {}
        for package_conf, content in deps.content.items():
            dep_name = content.split("\nName")[1].split("\n")[0].strip(": ")
            meson_dep_dict[dep_name] = self._dep_module.Dependency(
                dep_name,
                content.split("\nVersion")[1].split("\n")[0].strip(": "),
                True,
            )

        for dep in self._declared_deps.implicit:
            if dep.name in meson_dep_dict:
                meson_dep_dict[dep.name].status = dep.status

        meson_dep_list = list(meson_dep_dict.values())
        self._declared_deps.implicit = meson_dep_list
        self._declared_deps.write()

        meson_deps_classless = [
            [dep.name, dep.version] for dep in meson_dep_list if dep.status
        ]

        toolchain = MesonToolchain(self)
        toolchain.properties = {
            "_name": self.name,
            "_version": self.version,
            "_type": str(self.package_type),
            "_deps": meson_deps_classless,
        }
        toolchain.generate()

        if self.options.quit_after_generate:
            exit(0)

    def build(self):
        """Build the test project"""
        self._build_folder = os.path.join(self.recipe_folder, "build")
        meson = Meson(self)
        meson.configure()
        copy_file(
            self,
            "version.hpp",
            self.build_folder,
            self.source_folder + "/___version_header_dir___/",
        )
        meson.build()
        copy_file(
            self,
            "compile_commands.json",
            self.build_folder,
            self.source_folder,
        )
        meson.test()

    def package(self):
        """Install project headers and compiled libraries"""
        meson = Meson(self)
        meson.install()

    def package_info(self):
        """Package information"""
        self.cpp_info.libs = [self.name]
        self.cpp_info.includedirs = ["include"]
        self.cpp_info.bindirs = ["bin"]
