"""___package_name___ test package Conan file"""

from os.path import join as join_path
from typing import List
from conan import ConanFile
from conan.tools.build import can_run
from conan.tools.files import copy as copy_file
from conan.tools.gnu import PkgConfigDeps
from conan.tools.meson import Meson, MesonToolchain

required_conan_version = ">=2.0.6"  # pylint: disable=invalid-name


class ___package_name___TestPackage(ConanFile):
    """___package_name___ test package"""

    # Required
    name = "test_package"
    version = "1.0.0"

    # Configuration
    settings = "os", "compiler", "build_type", "arch"

    # Other
    _meson_dependencies: List[str] = []

    def build_requirements(self):
        """Declare dependencies of the build system"""
        self.tool_requires("meson/1.2.1")  # pylint: disable=not-callable
        self.tool_requires("pkgconf/2.0.3")  # pylint: disable=not-callable

    def requirements(self):
        """Declare library dependencies"""
        self.requires(self.tested_reference_str)
        self._meson_dependencies = [self.tested_reference_str.split("/")[0]]

    def layout(self):
        """Set the layout of the build files"""
        self.folders.build = "build"
        self.folders.generators = join_path(self.folders.build, "generators")

    def generate(self):
        """Generate the build system"""
        deps = PkgConfigDeps(self)
        deps.generate()
        toolchain = MesonToolchain(self)
        toolchain.properties = {
            "name": self.name,
            "version": self.version,
            "deps": self._meson_dependencies,
        }
        toolchain.generate()

    def build(self):
        """Build the test project"""
        meson = Meson(self)
        meson.configure()
        meson.build()

    def test(self):
        """Execute the generated executable(s)"""
        if can_run(self):
            cmd = join_path(self.build_folder, "test_package")
            self.run(cmd, env="conanrun")

